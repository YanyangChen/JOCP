//************ classes ***************

class Info {
    static final int totalIncrement = 10000;
    static int[] array1 = new int[totalIncrement];
    static int[] array2 = new int[totalIncrement];
    static int[] array3 = new int[totalIncrement];    
}

class MyThread extends Thread {
    Counter counter = null;
    MyThread(Counter counter) {
        this.counter = counter;
    }
    public void run() {
        for (int i=0; i<Info.totalIncrement/4; i++) {
            Info.array1[counter.increment1()-1]++;
            Info.array2[counter.increment2()-1]++;
            Info.array3[counter.increment3()-1]++;
        }
    }
}

class Counter {
    private int c1 = 0;
    public int increment1() {
        return ++c1;
    }

    private int c2 = 0;
    public synchronized int increment2() {
        return ++c2;
    }

    private AtomicInteger c3 = new AtomicInteger(0);
    public int increment3() {
        return c3.incrementAndGet();
    }
}


//************ Main method ***************

Counter counter = new Counter();
MyThread t1 = new MyThread(counter);
MyThread t2 = new MyThread(counter);
MyThread t3 = new MyThread(counter);
MyThread t4 = new MyThread(counter);
t1.start();
t2.start();
t3.start();
t4.start();
while (t1.isAlive() || t2.isAlive() || t3.isAlive() || t4.isAlive()) {
}
for (int i=0;i<Info.totalIncrement;i++) {
    if (Info.array1[i] != 1) {
        System.out.println("Array1 Element " + i + " : " + Info.array1[i]);
    }
    if (Info.array2[i] != 1) {
        System.out.println("Array2 Element " + i + " : " + Info.array2[i]);
    }
    if (Info.array3[i] != 1) {
        System.out.println("Array3 Element " + i + " : " + Info.array3[i]);
    }
}

//************ Other Setup ***************

import java.util.concurrent.atomic.AtomicInteger;
